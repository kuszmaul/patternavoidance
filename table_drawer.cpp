#include <assert.h>
#include <string.h>
#include <iostream>
#include <math.h>
#include <stdio.h>      /* printf, scanf, puts, NULL */
#include <time.h> 
#include <stdlib.h>
#include <bitset>
#include <vector>
#include <stdint.h>
#include <unordered_set>
#include <queue>
#include "countpatterns.h"
using namespace std;

uint64_t run_experiment(string set, int n) {
  return run_interior_experiment(set, n);
  // return n;
}

uint64_t Catalan(uint64_t n) {
  assert (n > 0);
  uint64_t Catalans[] = {1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, 9694845, 35357670, 129644790, 477638700, 1767263190, 6564120420, 24466267020, 91482563640, 343059613650, 1289904147324};
  assert(n < sizeof(Catalans));
  return Catalans[n];
}

uint64_t choose(uint64_t tmpn, uint64_t tmpk) {
  uint64_t n = tmpn - tmpk + 1;
  uint64_t k = tmpk + 1;
  // cout<<tmpn<<" "<<tmpk<<endl;
  uint64_t array[n][k];
  for (int i = 0; i < n; i++) array[i][0] = 1;
  for (int j = 0; j < k; j++) array[0][j] = 1;
  for (int i = 1; i < n; i++) {
    for (int j = 1; j < k; j++) {
      array[i][j] = array[i-1][j] + array[i][j-1];
    }
  }
  return array[n-1][k-1];
}

uint64_t factorial(int n) {
  double answer = 1;
  for (int i = 1; i <= n; i++) answer *= i;
  return answer;
}


double allestimatedseqcheck(int k, int n) {
  double bottom = 0;
  for (int i = 1; i <= k - 3; i++) {
    bottom += choose(n - k + i, i);
  }
  bottom += (((double)factorial(k -  1) - (double)1) / factorial(k - 1)) * (double) choose(n - 2, k - 2);
  return bottom;
}

double singleestimatedseqcheck(int k, int n) {
  double bottom = 0;
  for (int i = 1; i <= k - 2; i++) {
    bottom += (((double)1) / factorial(i + 1)) * choose(n - k + i, i);
  }
  return bottom;
}

double brutesingleestimatedseqcheck(int k, int n) {
  double bottom = 0;
  for (int i = 1; i <= k - 1; i++) {
    bottom += (((double)1) / factorial(i - 1)) * choose(n - k + i, i);
  }
  return bottom;
}

double buildspecialratio(int k, int n, double runtime, double prevruntime) {
  uint64_t bottom = 0;
  for (int i = 1; i <= k - 3; i++) {
    bottom += choose(n - k + i, i);
  }
  bottom *= Catalan(n);
  double real_bottom = (double)bottom + (double)Catalan(n) * ((factorial(k -  1) - (double)1) / factorial(k - 1)) * (double) choose(n - 2, k - 2);
  return (runtime - prevruntime) / real_bottom;
}

template <typename T>
void buildtable(int startk, int startn, int endk, int endn, vector < vector < T > > array) {
    cout<<"\\begin{tabular}{l |";
  for (int k = startk; k <= endk; k++) {
    cout<<" l ";
  }
  cout<<"}"<<endl;
  for (int k = startk; k <= endk; k++) {
    cout<<" & ";
    cout<<k;
  }
  cout<<" \\\\ \\hline"<<endl;
  for (int n = startn; n <= endn; n++) {
    cout<<n;
    for (int k = startk; k <= endk; k++) {
      cout<<" & "<<array[k][n];
    }
    cout<<" \\\\"<<endl;
  }
  cout<<"\\end{tabular}"<<endl;
}

int main() {
  //string sets[] = {"123", "1234", "12345", "123456"};
  // string sets[] = {"1234 1324 2314 2134 3124 3214"};   // an example where eqspec underestimates --> conjecture becomes does there exist a constant depending on the set s.t. eqspec will always be within that constant. and then say that for all computations above, eqspec stayed within a factor of two correct. in fact, it only fell below ?? for the 231 computation. so it seems likely that it's off by a lot only in special cases; even in thsoe cases i personally supect that it's no off by enough to show up prominantly in the time growth (for example it's not here i don't think).
  // string sets[] = {"4321 4231 2431 2341 3241 3421"};  // an example where eqspec does well (or maybe overestimates?)
  //string sets[] = {"1324, 4231"};
  string sets[] = {"312", "2431", "24531", "246531"}; // looking at how they compare to equation eqspec, these may be better to use for experimental data
  // either are interesting in that eqspec is doing worse as n increases and is doing badly for small kl but not so badly that anything seem's likely to every be off by more than a factor of 2, at least if you look at this example above.
  // HINGS TO THINK ABOUT:
  // (1) WHY DOES 312 ALWAYS GET EQSPEC RATION 2/3?!
  // (2) MAYBE JUST USE 231 INSTEAD OF 123 CASE, SINCE WE CAN USE T TO EXPLAIN THE PHENOMENON BUT IT'S A BETTE REPRESENTATIVE OF EVERYTING ELESE
  // AND SHOWS AN EXAMPLE WHERE THE EQSPEC RATIO STARTS TO RISE AGAIN ONCE N AND K ARE LARGE ENOUGH
  // (3) THE K = 4 CASE FOR 231 DOES SO POORLY BECAUSE EVEN THOUGH 231-AVOIDING PERMUTATIONS ARE BIAS TOWARDS HAVING FEWER INVERSIONS, WHEN N-1 AND N ARE IN ORDER IT MAKES A 231 HIT ALMOST INEVITABLE, RESULTING IN THEM ALMOST ALWAYS BEING OUT OF ORDER; THUS WE BASICALLY DO NOT GET THE 12 PREFIX, UNLIKE AS ANTICIPATED BY EQSPEC.
  // (4) WHY DOES EQSPEC RATIO TEND TO DECREASE? FOR A GOOD EXAMPLE OF THIS, THINK OF THE 231 CASE, WHERE THE 12 PREFIX ONLY SHOWS UP WHEN N IS AT THE END. THIS CASE GETS RARER AND RARE OVER TIME AS THERE ARE MORE AND MORE PLACES FOR N TO BE THAT AREN'T THE END. PROBABLY A SIMILAR THING TENDS TO HAPPEN IN GENERAL WHERE PREFIXES WHICH DON'T SHOW UP MUCH SHOW UP A LITTLE BY HAVING PARTS OF THEM BE AT THE ENDS OF THE PERMUTATION, BUT THEIR FREQUENCIES FALL OVER TIME, LEADING TO EQUATION EQSPEC BECOMING SLIGHTLY LESS ACCURATE OVER TIME. CLEARLY THIS IS NOT ALWAYS THE CASE, FOR EXAMPLE IN OUR EXPERIMENT WITH LARGE SETS OF PATTERNS.
  // (5) SHOULD BE BE CONCERNED THAT EQSPEC IS OFF BY NEARLY 40% IN SOME CASES? WELL FOR LARGE K, IT SEEMS TO DO PRETTY WELL. THERE ARE NO CASES RECORDED WHERE IT'S OFF BY MORE THAN 50% (FOR V2; CASES DO EXIST FOR NAIVE, BUT WHO CARES SINCE NAIVE SUCKS). SO IT SEEMS AS THOUGH I SHOULD NOT BE CONCERNED, JUST INTERESTED.
  // (6) BE HAPPY: WE HAVE A BETTER STORY TO TELL FOR THE LARGE SET CASE (BECAUSE IT IS MORE CONSISE AND EASIER TO UNDERSTAND NOW -- MORE FOCUSED).
  //  (7) FOR THE SINGLE PATTERN CASE, WE COULD TALKA BOUT THE EQSPECS, BUT IT'S PROBABLY NOT WORTH IT. IT SEEMS TO BE FALLING A LITTLE FASTER THOUGH THAN I WOULD HAVE EXPECTED, BUT I STILL DOUBT ANY OF THEME VERY GO BELOW 50%. HMM. ON THE OTHER HAND, WE DON'T MAKE ANY CLAIMS ABOUT EQSPEC FOR THAT CASE, OR TALK ABOUT IT AT ALL -- HOWEVER, WE DO MENTION THAT EQSPEC CAN BE INACCURATE,ONE ALTERNATIVE, IS SINCE WE DONT UNERSTAND EQSPEC'S ACCURACY VERY WELL IN GENERAL, IS TO ONLY MENTION IT BRIEFLY EVERYWHERE. RATHER THAN HAVE A WHOLE TABLE FO IT FOR THE 231-EXTENED CASE, WE COULD JUST MENTION THAT IT IS BETWEEN 50 AND 60 PERCENT FOR 132, BUT THAT THIS IS NO LONGER TRUE FOR LARGER K, WHEN FOR OUR COMPUTATIONS IT IS IN RANGES ???? RESPECTIVELY. COULD DO A SIMILAR GAME TO SAVE TABLE SPACE FOR PERCENT OF COMPUTATION TAKEN UP BY NON-AVOIDERS. THEN FOR THE SINGLETON CASE, SINCE WE'RE NOT MAKING ANY AUDATIOUS CLAIMS ABOUT OUR RELATIVE PERFORMANCE IN PRACTICE, IT'S PROBABLY NOT DISCUSSING SOMETHING THAT ONLY SEEMS TO AFFECT PERFORMANCE BY LESS THAN 50% (IN ALL CASES WE HAVE SEEN, INCLUDING USING SETS OF DIFFERENT SIZES); BUT IT IS WORTH POSING AS AN OPEN PROBLEM TO BETTER UNDESTAND EQSPEC'S ACCURACY, WITH THE RELATED CONJECTURE THAT EQSPEC IS ALWAYS CORRECT UP TO A CONSTANT (WE COULD EVEN MENTION THAT WE HAVEN'T SEEN ANY CASES WHERE IT'S OFF BY MORE THAN 50% FOR PERMLAB'S ALGORITHM).  SO EVEN IF EQSPEC ENDS UP BEING OFF BY A NON-CONSTANT AMOUNT, IT SEEMS AS THOUGH BY THAT POINT THE OTHER ASYMPTOTICS WOULD BE QUITE SIGNIFICANT RELATIVE TO THAT AMOUNT. SO ALTHOUGH I'M INTERESTED IN THE STUDY OF EQSPEC, IT SEEMS TO BE OK-ACCURACY, I TREAT IT SO FAR AS THAT I CONJECTURE THE BEHAVIOR OF IT'S ACCURACY, BUT I DO NOT GO TOO FAR INTO DETAIL ABOUT IT BECAUSE FOR OUR COMPUTATIONS IT DIDN'T AFFECT THINGS VERY MUCHFOR ANY SET OF PATTERNS WE'VE SEEN. CONSEQUENTLY, TALKING A LOT ABOUT IT WOULD BE LESS RELAVENT THAN DISCUSSING CACHE BEHAVIOR IN DETAIL.
  // (8) MAYBE USE THE NON-IDENTITY ONES FOR SINGLE PATTERNS, SINCE WE ANALYZED IDENTITY WELL ALREADY FOR OUR ALGORITHM
  // (10) A sentence like: There may be sets of patterns where the innacuracy is not as static when $n$ changes. The most significant example in the computations here is ???, where the ratio of the correct answer to eqs?? changes by ?? percent between n = ?? and n = ??. In fact, the accuracy of ?? is not very well understood at all, and warents future work. For example, is it true that ?? -- we've seen no computations obviously contradicting this.
  
  // string sets[] = {"231",
  //  		   "3421 2314 4231 2431 3241 3412 3142 1342 2413 2341 ",
  //  		   "41352 32514 45231 42153 32451 25314 35421 52314 23154 53421 34215 15342 45213 23415 42315 41253 13542 23145 45321 24153 14253 42351 43521 25143 34512 34152 53142 24531 25134 24351 54231 24135 23541 13452 45123 34251 45132 52431 21453 14523 41532 43512 35124 23514 42531 14352 35412 23451 24513 13524 42513 25413 13425 35241 31542 43152 34125 35142 32541 35214 12453 25431 52341 53241 45312 52413 25341 51342 32415 34521 31452 31524 43251 53412 31425 14532 24315 41523 ",
  //  		};
  // string sets[] = {"123",
  // 		   "2314 2134 1324 3124 1423 4123 1342 1234 1243 2341 ",
  // 		   "41352 15324 21354 32451 25314 52314 23154 15342 34215 23415 31254 42315 41253 13542 23145 24153 14253 42351 34512 31245 34152 24531 25134 24351 24135 23541 15243 15423 12435 13452 45123 51243 34251 42135 52134 21453 14523 13245 35124 23514 14352 21534 23451 51324 13254 15234 24513 13524 54123 12534 13425 32145 53124 51234 34125 12345 14235 12354 12453 21345 52341 51423 21435 25341 51342 32415 12543 34521 31452 43125 31524 31425 41325 14532 41235 14325 41523 24315 ",
  // 		};
  int startk = 3;
  int endk = 6; // REQUIRE: endk - startk + 1 = |sets|
  int startn = 8;
  int endn = 11;
  vector < vector < double  > > runtimes (endk + 1, vector < double > (endn + 1, 0));
  vector < vector < uint64_t  > > stat1 (endk + 1, vector < uint64_t > (endn + 1));
  vector < vector < uint64_t  > > stat2 (endk + 1, vector < uint64_t > (endn + 1));
  vector < vector < uint64_t  > > stat3 (endk + 1, vector < uint64_t > (endn + 1));
  vector < vector < uint64_t  > > stat4 (endk + 1, vector < uint64_t > (endn + 1));

  vector < vector < double > > workperavoider  (endk + 1, vector < double > (endn + 1));
  vector < vector < double > > fractiononavoiders  (endk + 1, vector < double > (endn + 1));
  vector < vector < double > > specialratio  (endk + 1, vector < double > (endn + 1));
  vector < vector < double > > secspercheck  (endk + 1, vector < double > (endn + 1));
  vector < vector < double > > seqcheckratio  (endk + 1, vector < double > (endn + 1));
  
  
  for (int n = startn; n <= endn; n++) {
    for (int k = startk; k <= endk; k++) {
      runtimes[k][n] = run_interior_experiment(sets[k - startk], n);
      stat1[k][n] = getstat1();
      stat2[k][n] = getstat2();
      stat3[k][n] = getstat3();
      stat4[k][n] = getstat4();
      //cout<<stat1[k][n]<<" "<<stat2[k][n]<<" "<<stat3[k][n]<<endl;
      workperavoider[k][n] = (double)stat2[k][n] / (double)stat3[k][n];
      // workperavoider[k][n] = (double)stat2[k][n] / (double)stat3[k][n];
      //      fractiononavoiders[k][n] = (double)stat2[k][n] / (double)stat1[k][n]; //FOR BRUTE
      fractiononavoiders[k][n] = (double)stat4[k][n] / (double)stat2[k][n];
      //cout<<((double)stat2[k][n] / (double)Catalan(n))<<" "<<estimatedseqcheck(k, n)<<endl;
      //cout<<stat3[k][n]<<endl;
      // cout<<((double)stat2[k][n] / (double)prevnumwins)<<" at n = "<<n<<endl;
      // seqcheckratio[k][n] = ((double)stat2[k][n] / (double)prevnumwins) / (double)(allestimatedseqcheck(k, n)); // for brute all
      seqcheckratio[k][n] = ((double)runtimes[k][n] / (double)stat3[k][n]);
      //specialratio[k][n] = buildspecialratio(k, n, runtimes[k][n], runtimes[k][n - 1]);
      //secspercheck[k][n] = runtimes[k][n]/(double)stat4[k][n]; // FOR BRUTE
      secspercheck[k][n] = runtimes[k][n]/(double)stat2[k][n];
    }
  }
  buildtable(startk, startn, endk, endn, runtimes);
  buildtable(startk, startn, endk, endn, workperavoider);
  buildtable(startk, startn, endk, endn, fractiononavoiders);
  buildtable(startk, startn, endk, endn, seqcheckratio);
  
  buildtable(startk, startn, endk, endn, secspercheck);
}
