Time for our code to do up to 16 for all sets of size > 4
22410.01user 46184.75system 54:07.50elapsed 2112%CPU (0avgtext+0avgdata 26276420maxresident)



-------------------------------------------- computations for 231-extended avoiders

------------ PermLab implementation (our good version):
Computations for all patterns of size k containing a 231 pattern: 
Runtimes: 
\begin{tabular}{l | l  l  l  l }
 & 3 & 4 & 5 & 6 \\ \hline
8 & 0.000274 & 0.00061 & 0.001179 & 0.001715 \\
9 & 0.000863 & 0.002347 & 0.005514 & 0.007261 \\
10 & 0.002973 & 0.009522 & 0.02519 & 0.038897 \\
11 & 0.010566 & 0.039417 & 0.11887 & 0.209362 \\
12 & 0.037865 & 0.163025 & 0.557408 & 1.12139 \\
13 & 0.139954 & 0.674547 & 2.59183 & 5.82087 \\
14 & 0.516551 & 2.80423 & 11.9308 & 29.7888 \\
15 & 1.92921 & 11.6143 & 54.409 & 148.835 \\
16 & 7.30082 & 48.2353 & 245.582 & 730.895 \\
\end{tabular}
Percent of sequence checks in S_n spent on avoiders: 
\begin{tabular}{l | l  l  l  l }
 & 3 & 4 & 5 & 6 \\ \hline
8 & 0.777778 & 0.932093 & 0.953401 & 0.945023 \\
9 & 0.787879 & 0.946005 & 0.969363 & 0.970868 \\
10 & 0.797468 & 0.956103 & 0.978837 & 0.983218 \\
11 & 0.806452 & 0.963647 & 0.984794 & 0.989676 \\
12 & 0.814815 & 0.969423 & 0.988717 & 0.993307 \\
13 & 0.822581 & 0.973938 & 0.991404 & 0.995474 \\
14 & 0.829787 & 0.977532 & 0.993303 & 0.99683 \\
15 & 0.836478 & 0.980437 & 0.994684 & 0.997715 \\
16 & 0.842697 & 0.982817 & 0.99571 & 0.998311 \\
\end{tabular}
Average number of sequence checks per avoider in S_n:
\begin{tabular}{l | l  l  l  l }
 & 3 & 4 & 5 & 6 \\ \hline
8 & 2.8 & 16.4713 & 32.7357 & 34.379 \\
9 & 3.05882 & 21.6427 & 52.1133 & 68.6142 \\
10 & 3.31579 & 27.512 & 77.8996 & 123.344 \\
11 & 3.57143 & 34.0814 & 111.02 & 205.41 \\
12 & 3.82609 & 41.3529 & 152.404 & 322.642 \\
13 & 4.08 & 49.3283 & 202.985 & 483.86 \\
14 & 4.33333 & 58.0092 & 263.699 & 698.876 \\
15 & 4.58621 & 67.3971 & 335.485 & 978.491 \\
16 & 4.83871 & 77.4934 & 419.285 & 1334.5 \\
\end{tabular}
Average number of seconds per sequence check (for all permutations):
\begin{tabular}{l | l  l  l  l }
 & 3 & 4 & 5 & 6 \\ \hline
8 & 1.01602e-07 & 5.19345e-08 & 5.27522e-08 & 7.07198e-08 \\
9 & 8.79501e-08 & 4.23321e-08 & 3.79944e-08 & 3.8406e-08 \\
10 & 6.31966e-08 & 2.88546e-08 & 2.39275e-08 & 2.01847e-08 \\
11 & 3.5753e-08 & 1.56436e-08 & 1.42983e-08 & 1.42699e-08 \\
12 & 3.01782e-08 & 1.43077e-08 & 1.38005e-08 & 1.36441e-08 \\
13 & 2.94491e-08 & 1.39252e-08 & 1.34668e-08 & 1.3138e-08 \\
14 & 2.88287e-08 & 1.36592e-08 & 1.32076e-08 & 1.28275e-08 \\
15 & 2.83099e-08 & 1.3462e-08 & 1.30265e-08 & 1.25459e-08 \\
16 & 2.7762e-08 & 1.3219e-08 & 1.28449e-08 & 1.23551e-08 \\
\end{tabular}
Ratio of number of checks per avoider in S_n to number expected: 
\begin{tabular}{l | l  l  l  l }
 & 3 & 4 & 5 & 6 \\ \hline
8 & 0.7 & 0.890342 & 0.958117 & 0.985778 \\
9 & 0.679739 & 0.883377 & 0.955477 & 0.984303 \\
10 & 0.663158 & 0.878043 & 0.953873 & 0.983474 \\
11 & 0.649351 & 0.873882 & 0.952961 & 0.983059 \\
12 & 0.637681 & 0.870587 & 0.952525 & 0.982917 \\
13 & 0.627692 & 0.867947 & 0.952422 & 0.982957 \\
14 & 0.619048 & 0.865809 & 0.952555 & 0.98312 \\
15 & 0.611494 & 0.864066 & 0.952857 & 0.983367 \\
16 & 0.604839 & 0.862635 & 0.953281 & 0.98367 \\
\end{tabular}

table_drawer output for raw brute-force:
Computations for single patterns:
Runtimes: 
\begin{tabular}{l | l  l  l  l }
 & 3 & 4 & 5 & 6 \\ \hline
8 & 0.001588 & 0.013206 & 0.016639 & 0.012114 \\
9 & 0.004722 & 0.063982 & 0.094424 & 0.072522 \\
10 & 0.009175 & 0.299618 & 0.832143 & 0.958963 \\
11 & 0.037395 & 2.37787 & 9.53002 & 13.5185 \\
12 & 0.151866 & 19.068 & 112.187 & 198.764 \\
13 & 0.615651 & 153.8 & 1348.32 & 3032.45 \\
\end{tabular}
Computations for 231-extensions:
Runtimes: 
\begin{tabular}{l | l  l  l  l }
 & 3 & 4 & 5 & 6 \\ \hline
8 & 0.000596 & 0.001298 & 0.001736 & 0.002315 \\
9 & 0.00231 & 0.005815 & 0.009202 & 0.01062 \\
10 & 0.009289 & 0.026824 & 0.049003 & 0.06274 \\
11 & 0.03736 & 0.124739 & 0.258738 & 0.362664 \\
12 & 0.151379 & 0.572241 & 1.34573 & 2.12052 \\
13 & 0.623822 & 2.60707 & 6.83837 & 11.9455 \\
14 & 2.49026 & 11.8011 & 34.3169 & 66.6236 \\
15 & 10.1558 & 53.0141 & 169.297 & 359.042 \\
16 & 41.2994 & 236.709 & 822.06 & 1906.53 \\
\end{tabular}
Computations for single patterns:
Runtimes: 
\begin{tabular}{l | l  l  l  l }
 & 3 & 4 & 5 & 6 \\ \hline
8 & 0.02184 & 0.020465 & 0.013512 & 0.007822 \\
9 & 0.25883 & 0.265057 & 0.187779 & 0.120815 \\
10 & 3.36125 & 3.76337 & 2.79108 & 1.94027 \\
11 & 46.9735 & 57.2166 & 44.3523 & 32.6216 \\
12 & 705.082 & 930.591 & 752.467 & 581.081 \\
\end{tabular}
Computations for multiple patterns:
Runtimes: 
\begin{tabular}{l | l  l  l }
 & 3 & 4 & 5 \\ \hline
8 & 0.021878 & 0.046843 & 0.054357 \\
9 & 0.258819 & 0.650249 & 0.911482 \\
10 & 3.36337 & 9.81897 & 16.1492 \\
11 & 46.9607 & 156.46 & 297.638 \\
12 & 704.189 & 2646.83 & 5746.63 \\
\end{tabular}


For hybrids:
Computations for single patterns:
Runtimes: 
\begin{tabular}{l | l  l  l  l }
 & 3 & 4 & 5 & 6 \\ \hline
8 & 0.000612 & 0.006046 & 0.010064 & 0.008983 \\
9 & 0.001813 & 0.030825 & 0.059577 & 0.051856 \\
10 & 0.003323 & 0.100995 & 0.337259 & 0.452581 \\
11 & 0.009766 & 0.654897 & 3.38898 & 5.55994 \\
12 & 0.03583 & 4.57399 & 35.2029 & 72.3202 \\
13 & 0.131914 & 32.5331 & 378.392 & 985.548 \\
\end{tabular}
Computations for 231-extensions:
Runtimes: 
\begin{tabular}{l | l  l  l  l }
 & 3 & 4 & 5 & 6 \\ \hline
8 & 0.00023 & 0.000538 & 0.001032 & 0.001671 \\
9 & 0.000807 & 0.002056 & 0.004668 & 0.006561 \\
10 & 0.002806 & 0.008571 & 0.021623 & 0.034612 \\
11 & 0.009858 & 0.035238 & 0.102063 & 0.181827 \\
12 & 0.035799 & 0.145585 & 0.480056 & 0.968053 \\
13 & 0.131752 & 0.598167 & 2.237 & 5.04362 \\
14 & 0.489571 & 2.47665 & 10.3061 & 25.9228 \\
15 & 1.82527 & 10.1936 & 47.3118 & 130.265 \\
16 & 6.84148 & 42.0522 & 212.918 & 643.981 \\
\end{tabular}
Computations for single patterns:
Runtimes: 
\begin{tabular}{l | l  l  l  l }
 & 3 & 4 & 5 & 6 \\ \hline
8 & 0.003072 & 0.004089 & 0.003419 & 0.002981 \\
9 & 0.027805 & 0.041438 & 0.037101 & 0.032497 \\
10 & 0.286665 & 0.468362 & 0.440441 & 0.40016 \\
11 & 3.27371 & 5.74916 & 5.71419 & 5.32004 \\
12 & 40.8097 & 77.063 & 80.7861 & 77.3235 \\
\end{tabular}
Computations for multiple patterns:
Runtimes: 
\begin{tabular}{l | l  l  l }
 & 3 & 4 & 5 \\ \hline
8 & 0.003052 & 0.010082 & 0.018673 \\
9 & 0.027678 & 0.112801 & 0.247352 \\
10 & 0.286071 & 1.40046 & 3.61642 \\
11 & 3.27454 & 18.7659 & 55.5524 \\
12 & 40.7167 & 269.727 & 893.669 \\
\end{tabular}

Our code:
Computations for single patterns:
Runtimes: 
\begin{tabular}{l | l  l  l  l }
 & 3 & 4 & 5 & 6 \\ \hline
8 & 0.000394 & 0.002824 & 0.004925 & 0.004964 \\
9 & 0.001147 & 0.014894 & 0.029415 & 0.029735 \\
10 & 0.002446 & 0.053366 & 0.131541 & 0.162604 \\
11 & 0.005641 & 0.256375 & 1.24706 & 1.9885 \\
12 & 0.021595 & 1.9562 & 12.7043 & 23.9101 \\
13 & 0.082311 & 14.1588 & 125.383 & 291.946 \\
\end{tabular}
Computations for 231-extensions:
Runtimes: 
\begin{tabular}{l | l  l  l  l }
 & 3 & 4 & 5 & 6 \\ \hline
8 & 0.000144 & 0.000188 & 0.000277 & 0.000439 \\
9 & 0.000452 & 0.000691 & 0.000811 & 0.001115 \\
10 & 0.001542 & 0.002153 & 0.002807 & 0.003561 \\
11 & 0.005865 & 0.007876 & 0.009962 & 0.011906 \\
12 & 0.021229 & 0.028337 & 0.035911 & 0.04212 \\
13 & 0.079654 & 0.104522 & 0.130536 & 0.152338 \\
14 & 0.299742 & 0.418196 & 0.526982 & 0.618422 \\
15 & 1.3749 & 1.92231 & 2.3031 & 2.63199 \\
16 & 5.81805 & 7.87171 & 9.24372 & 10.5732 \\
\end{tabular}
Computations for single patterns:
Runtimes: 
\begin{tabular}{l | l  l  l  l }
 & 3 & 4 & 5 & 6 \\ \hline
8 & 0.003129 & 0.00294 & 0.00306 & 0.002973 \\
9 & 0.027309 & 0.026699 & 0.026876 & 0.027136 \\
10 & 0.285209 & 0.30289 & 0.302109 & 0.30958 \\
11 & 3.52071 & 3.65737 & 3.66655 & 3.76642 \\
12 & 42.7415 & 44.7521 & 44.7912 & 45.7166 \\
\end{tabular}
Computations for multiple patterns:
Runtimes: 
\begin{tabular}{l | l  l  l }
 & 3 & 4 & 5 \\ \hline
8 & 0.003137 & 0.004647 & 0.00602 \\
9 & 0.027076 & 0.041032 & 0.055434 \\
10 & 0.286499 & 0.453206 & 0.637362 \\
11 & 3.55469 & 5.73589 & 8.35939 \\
12 & 42.8428 & 74.7179 & 110.991 \\
\end{tabular}

V1 tests:
Computations for single patterns:
Runtimes: 
\begin{tabular}{l | l  l  l  l }
 & 3 & 4 & 5 & 6 \\ \hline
8 & 0.000535 & 0.004134 & 0.00735 & 0.007195 \\
9 & 0.00147 & 0.020753 & 0.042911 & 0.040372 \\
10 & 0.003003 & 0.0706 & 0.212894 & 0.2893 \\
11 & 0.007835 & 0.396423 & 2.02421 & 3.3266 \\
12 & 0.02831 & 2.66507 & 20.1606 & 41.0601 \\
13 & 0.102928 & 18.1012 & 201.086 & 519.022 \\
\end{tabular}
Computations for 231-extensions:
Runtimes: 
\begin{tabular}{l | l  l  l  l }
 & 3 & 4 & 5 & 6 \\ \hline
8 & 0.000184 & 0.000748 & 0.005143 & 0.032945 \\
9 & 0.000589 & 0.002524 & 0.019778 & 0.130989 \\
10 & 0.002161 & 0.009829 & 0.081869 & 0.552133 \\
11 & 0.007585 & 0.038192 & 0.339863 & 2.3718 \\
12 & 0.027489 & 0.148635 & 1.41688 & 10.2887 \\
13 & 0.101041 & 0.586564 & 5.93899 & 44.7564 \\
\end{tabular}


Permlab (actual)

[williamkuszmaul@ip-172-31-14-15 ~]$ jdk1.8.0_60/bin/java -cp .:PermLab.jar permlabsetstosequences foo 13
13
153642
up to 8 took: 0.116656543s
up to 9 took: 0.275731075s
up to 10 took: 1.128620574s
up to 11 took: 8.428671356s
  C-c C-c[williamkuszmaul@ip-172-31-14-15 ~]$ jdk1.8.0_60/bin/java -cp .:PermLab.jar permlabsetstosequences foo 13
13
231
up to 8 took: 0.018048848s
up to 9 took: 0.016793103s
up to 10 took: 0.02497285s
up to 11 took: 0.051789279s
up to 12 took: 0.123531397s
up to 13 took: 0.286613375s
2431
up to 8 took: 0.019289838s
up to 9 took: 0.04796617s
up to 10 took: 0.147999521s
up to 11 took: 0.915576695s
up to 12 took: 5.020562208s
up to 13 took: 30.549175559s
24531
up to 8 took: 0.029995484s
up to 9 took: 0.122398554s
up to 10 took: 0.581044446s
up to 11 took: 3.980559956s
up to 12 took: 35.127282735s
up to 13 took: 333.42272961s
246531
up to 8 took: 0.034760444s
up to 9 took: 0.151717168s
up to 10 took: 0.75713974s
up to 11 took: 6.795503001s
up to 12 took: 74.387619452s
up to 13 took: 911.032572194s

[williamkuszmaul@ip-172-31-14-15 ~]$ jdk1.8.0_60/bin/java -cp .:PermLab.jar permlabsetstosequences foo 13
13
41352 32514 45231 42153 32451 25314 35421 52314 23154 53421 34215 15342 45213 23415 42315 41253 13542 23145 45321 24153 14253 42351 43521 25143 34512 34152 53142 24531 25134 24351 54231 24135 23541 13452 45123 34251 45132 52431 21453 14523 41532 43512 35124 23514 42531 14352 35412 23451 24513 13524 42513 25413 13425 35241 31542 43152 34125 35142 32541 35214 12453 25431 52341 53241 45312 52413 25341 51342 32415 34521 31452 31524 43251 53412 31425 14532 24315 41523
up to 8 took: 0.103853682s
up to 9 took: 0.186512765s
up to 10 took: 0.39090978s
up to 11 took: 0.781351212s
up to 12 took: 2.580230024s
up to 13 took: 9.473075079s

Note that our V1 continues to have the win over PermLab for large sets (where sequence checking dominates costs), with similar ratio as for single patterns, indicating that V1's sequence detection is competative with PermLab's. Either way, the pop-count hack is much faster in V2 than PermLab or V1 for large sets of patterns.

Computations for PiDD-based software:

pattern avoidance single patterns
\begin{tabular}{l | l  l  l  l }
 & 3 & 4 & 5 & 6 \\ \hline
8 & 0.011256 & 0.007773 & 0.011985 & 0.009501 \\
9 & 0.016304 & 0.013797 & 0.028477 & 0.009036 \\
10 & 0.027662 & 0.034674 & 0.06761 & 0.039132 \\
11 & 0.046911 & 0.099971 & 0.239361 & 0.151059 \\
12 & 0.087359 & 0.36183 & 0.952838 & 0.965599 \\
13 & 0.149178 & 1.64009 & 5.31083 & 6.42342 \\
14 & 0.219189 & 6.43452 & 24.8107 & 34.897 \\
15 & 0.561649 & 24.3395 & 115.127 & 199.916 \\
16 & 1.67208 & 91.0305 & 567.907 & 1254.01 \\
\end{tabular}
(see piddtests.cpp)

Tests for singles using PiDD alg for pattern counting in S_n: 
\begin{tabular}{l | l  l  l  l }
 & 3 & 4 & 5 & 6 \\ \hline
8 & 0.098977 & 0.078364 & 0.031922 & 0.03073 \\
9 & 0.263293 & 0.249325 & 0.08713 & 0.040316 \\
10 & 1.91841 & 3.32921 & 1.06276 & 0.191412 \\
11 & 15.6383 & 40.4006 & 17.4538 & 3.67187 \\
12 & 105.241 & 532.328 & 249.606 & 58.2368 \\
\end{tabular}

Tests for 231-extensions
\begin{tabular}{l | l  l }
 & 3 & 4 \\ \hline
8 & 0.095182 & 0.137889 \\
9 & 0.269951 & 1.61251 \\
10 & 1.82459 & 20.1396 \\
11 & 15.3363 & 236.632 \\
\end{tabular}
