This software is released under the MIT License. See file LICENSE.
Author: William Kuszmaul
Contact: william.kuszmaul@gmail.com
The algorithms and engineering techniques for this software is discussed in the paper.pdf.
Citation information bibtex entry:
@misc{kuszmaul15,
  title = {Fast Algorithms for Finding Pattern Avoiders and Counting Pattern Occurrences in Permutations},
  author = {William Kuszmaul},
  year = {2015},
  howpublished = {\url{github.com/williamkuszmaul/patternavoidance}}
}

11111111111111111111111111111111111111111111111111 NEED TO CHECK HASHMAP RESIZE

Note: If, for some reason your computer cannot run CILK (which is
built into G++), replace the code in function
countavoidersfromfile_parallel in fastavoidance.cpp with a call to
countavoidersfromfile, remove the header #include <cilk/cilk.h> from
fastavoidance.cpp, and remove the -fcilkplus argument
from the Makefile. However, this will prevent use of parallelism in
masstest.cpp.

                          Core files

LICENSE: Copyright information.

Makefile: Simple makefile.

paper.pdf: Contains in depth discussion of the algorithms implemented
here. Also, introduces the notation we use in our comments. When
discussing permutations, we use the same notation as in the paper,
indexing both position and value at 1 in the comments; the code,
however, indexes at zero

perm.cpp/.h: We represent permutation in 64-bit integers, using a
half-byte per letter. We can only represent permutations of size <=
16. This file contains basic functions for using this
permutation-representation.

fastavoidance.cpp/.h: Implements O(|S_{N-1}(Pi)Nk) algorithm for
building S_n(Pi) for each n in [1..N] and some set of patterns (which
need not be the same size) Pi, the largest being of size k. Could
easily be modified to build S \cap S_n(Pi) for a down-closed set of
permutation S. Also implements a brute-force algorith an and algorithm
based on PermLab for the same task; for certain settings, this leads
to the requirement that Pi comprise patterns of only one size.

countpatterns.cpp/.h: Implements an O(n!k) algorithm for counting the
number of Pi-patterns appearing in each permutation in S_n for n in
[1..N]. Here, Pi is a set of patterns, the longest being length
k. Could easily be modified to build S \cap S_n(Pi) for a down-closed
set of permutations S. Note, cannot handle a permutation having more
than 63504 patterns, because we currently store the number of patterns
in a short. Could easily be changed, at cost of constant-factor of
space efficiency. However, this is fine at least for n \le 16, because
there are only 63504 possible subsequences, including the empty
subsequences and subsequences of size 1. Also implements a brute-force
algorithm, and a hybrid algorithm, which both require patterns to be
of uniform size.

buildinput.cpp/.h: Writes to a file either (a) all pattern sets with
patterns of size k up to trivial wilf-equivalence, or (b) all pattern
sets of size j with patterns of size k up to trivial wilf-equivalence.

stripped: NOT INCLUDED. This file needs to be downloaded at
http://oeis.org/wiki/Welcome#Compressed_Versions, and decompressed to
get a list of OEIS sequences, which are interpreted by
oeislocal.cpp/.h.

oeislocal.cpp/.h: Implements an OEIS object which on initialization
builds data structures for doing OEIS look-ups using file
stripped. Comes with user interface for looking up sequences in OEIS
(using only local copy of OEIS).

hashdb.cpp/.h: A simple linear-probing hash table storing 64 bit
integers. Often runs several times faster than unordered_set<unsigned
long long>.

hashmap.cpp/.h: A simple linear-probing hash table for storing
(unsigned long long, <payload>) pairs. Often runs faster than C++
unordered map. Payload must be fixed size. No special destructor is
called on payload.

                     Usage Example Files

example.cpp: Example use of fastavoidance.h and countpatterns.h
modules. And a bit of use of perm.h module.

speedtest.cpp: Command-line driven program to test speed of
countpatterns.h and fastavoidance.h on an input file containing a
pattern set on each line. For testing fastavoidance.h, also inputs an
output file to which the number of permuations of each size avoiding
each set of patterns is written.

masstest.cpp: For each pattern set S of S_4 satisfying |S| > 4 up to
trivial wilf equivalence, computes number of permutations of each size
(up to size 16) avoiding the pattern set. Then looks up which of the
resulting sequences can be found in OEIS. Writes all of this to an
output file. The Cilk package is used to parallelize the
pattern-avoidance computations. The output is compressed and stored in
datafolder.tar.gz. Has option of doing OEIS analysis on pre-built
data files, or of building data files from scratch and then doing OEIS
analysis.

                     Additional Files

table_drawer.cpp: Uses fastavoidance.cpp and countpatterns.cpp to run
performance tests, comparing algorithms. Automatically latexs the
results into tables. To use, put settings of fastavoidance.cpp and
countpatterns.cpp to the algorithms you want to test, pick which tests
in table_drawer.cpp you want to run, and compile and run table_drawer.

data.txt: Contains outputs for table_drawer.cpp. (most of which are
presented in paper.pdf)

datafolder.tar.gz: Contains compressed output of masstest.cpp.

hashmaptest.cpp: Does a simple test to see if hashmap is working.